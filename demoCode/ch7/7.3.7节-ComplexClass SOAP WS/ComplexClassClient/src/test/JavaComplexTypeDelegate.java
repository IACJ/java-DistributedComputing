package test;

import java.util.List;
import java.util.concurrent.Future;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.ws.AsyncHandler;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.Response;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.1.3-hudson-390-
 * Generated source version: 2.0
 * 
 */
@WebService(name = "JavaComplexTypeDelegate", targetNamespace = "http://service/")
public interface JavaComplexTypeDelegate {

	/**
	 * 
	 * @return returns javax.xml.ws.Response<test.GetPersonResponse>
	 */
	@WebMethod(operationName = "getPerson")
	@RequestWrapper(localName = "getPerson", targetNamespace = "http://service/", className = "test.GetPerson")
	@ResponseWrapper(localName = "getPersonResponse", targetNamespace = "http://service/", className = "test.GetPersonResponse")
	public Response<GetPersonResponse> getPersonAsync();

	/**
	 * 
	 * @param asyncHandler
	 * @return returns java.util.concurrent.Future<? extends java.lang.Object>
	 */
	@WebMethod(operationName = "getPerson")
	@RequestWrapper(localName = "getPerson", targetNamespace = "http://service/", className = "test.GetPerson")
	@ResponseWrapper(localName = "getPersonResponse", targetNamespace = "http://service/", className = "test.GetPersonResponse")
	public Future<?> getPersonAsync(
			@WebParam(name = "asyncHandler", targetNamespace = "") AsyncHandler<GetPersonResponse> asyncHandler);

	/**
	 * 
	 * @return returns java.util.List<test.Person>
	 */
	@WebMethod
	@WebResult(targetNamespace = "")
	@RequestWrapper(localName = "getPerson", targetNamespace = "http://service/", className = "test.GetPerson")
	@ResponseWrapper(localName = "getPersonResponse", targetNamespace = "http://service/", className = "test.GetPersonResponse")
	public List<Person> getPerson();

}
