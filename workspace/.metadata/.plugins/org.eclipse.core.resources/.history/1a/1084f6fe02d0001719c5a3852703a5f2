package com.acj.myServer;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;

public class MyResponse {

    private static final int BUFFER_SIZE = 1024;
    public static final String SUCCESS_MESSAGE = "程序执行成功！";
    public static final String ERROR_MESSAGE = "程序执行出错：";
    public static final int SUCCESS = 0;            // 表示程序执行成功
    
    MyRequest request;
    OutputStream output;

    public MyResponse(OutputStream output) {
        this.output = output;
    }

    public void setRequest(MyRequest request) {
        this.request = request;
    }

    public void sendStaticResource() throws IOException {
        byte[] bytes = new byte[BUFFER_SIZE];
        FileInputStream fis = null;
        try {
            File file = new File(MyServer.WEB_ROOT, request.getUri());
            if (file.exists()) {	
            	String httpHeader ="HTTP/1.1 200\r\n" + "Content-Type: text/html\r\n" 
            			+ "Content-Length: " + file.length() + "\r\n" + "\r\n";
            	 output.write(httpHeader.getBytes());
                fis = new FileInputStream(file);
                int ch = fis.read(bytes, 0, BUFFER_SIZE);
                while (ch != -1) {
                    output.write(bytes, 0, ch);
                    ch = fis.read(bytes, 0, BUFFER_SIZE);
                }
            } else {
            	responseNotFound();
            }
        } catch (Exception e) {
            // thrown if cannot instantiate a File object
            System.out.println(e.toString());
        } finally {
            if (fis != null)
                fis.close();
        }
    }
    public void execCGI() throws IOException, InterruptedException{
    	File file = new File(MyServer.WEB_ROOT, request.getUri());
    	if (file.exists()) {
    		Process process = Runtime.getRuntime().exec("python "+MyServer.WEB_ROOT+request.getUri());
    		readProcessOutput(process);
    		int exitCode = process.waitFor();
    		if (exitCode == SUCCESS) {
    			System.out.println(SUCCESS_MESSAGE);
    		} else {
    			System.out.println(ERROR_MESSAGE + exitCode);
    		}
    	} else {
    		responseNotFound();
    	}    
    }
    
    private void responseNotFound() throws IOException{
        String errorMessage = "HTTP/1.1 404 File Not Found\r\n" + "Content-Type: text/html\r\n"
                + "Content-Length: 36\r\n" + "\r\n" + "<h1>404</h1><h1>file not found~</h1>";
        output.write(errorMessage.getBytes());
    }


    private  void readProcessOutput(final Process process) {
        // 将进程的正常输出在 System.out 中打印，进程的错误输出在 System.err 中打印
        read(process.getInputStream(), new PrintStream(output));
        read(process.getErrorStream(), new PrintStream(output));
    }

    // 读取输入流
    private  void read(InputStream inputStream, PrintStream out) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

            String line;
            while ((line = reader.readLine()) != null) {
                out.println(line);
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {

            try {
                inputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
