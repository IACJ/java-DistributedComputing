package com.acj.myServer;

import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.BindException;
import java.net.ServerSocket;
import java.net.Socket;



public class MyServer {

	private static final int PORT = 80;
	private ServerSocket server;

   public static final String WEB_ROOT = "c:/test/";

   // 关闭服务命令
   private static final String SHUTDOWN_COMMAND = "/SHUTDOWN";
	
	public MyServer() {
		try {
			server = new ServerSocket(PORT);
			print("已监听端口:"+PORT);
		}catch (BindException e){
			e.printStackTrace();
			print("【错误！】[error]:端口已被占用,绑定失败!");
			System.out.println("提示：请不要同时打开多个server程序");
			return;
		} catch (Exception e){
			e.printStackTrace();
		}
	}
	public void run(){
		 // 循环等待一个请求
        while (true) {
            Socket socket = null;
            InputStream input = null;
            OutputStream output = null;
            try {
                //等待连接，连接成功后，返回一个Socket对象
            	print("等待用户连接...");
                socket = server.accept();
                print("已建立一个用户连接.");
                System.out.println();
                input = socket.getInputStream();
                output = socket.getOutputStream();

                // 创建Request对象并解析
                MyRequest request = new MyRequest(input);
                request.parse();
                print("用户请求: "+request.getUri());
                
                if (request ==null){
                	request.show();
                	print("窝大草");
                }
                
                if (request.getUri() ==null){
                	request.show();
                	print("窝草");
                }
                
                // 检查是否是关闭服务命令
                if (request.getUri().equals(SHUTDOWN_COMMAND)) {
                    break;
                }

                // 创建 Response 对象
                MyResponse response = new MyResponse(output);
                response.setRequest(request);
                response.sendStaticResource();

                // 关闭 socket 对象
                socket.close();
                print("断开了一个连接");
                
            } catch(NullPointerException e){
            	e.printStackTrace();
            	print("浏览器发送空请求！ NullPointerException");
            	print("一定是Chrome浏览器的原因！");
            	
            	continue;
            }
            
            catch (Exception e) {
                e.printStackTrace();
                continue;
            }
        }

	}
	
    public static void print(String s){
    	System.out.println("[Server]: "+s);
    	
    }
	public static void main(String[] args) {
		System.out.println("hello myServer");	
		MyServer myServer = new MyServer();
		myServer.run();
	}
}
